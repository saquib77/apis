package com.employee.emp.services;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.UUID;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Service;

import com.employee.emp.daos.AddressDao;
import com.employee.emp.daos.DepartmentDao;
import com.employee.emp.daos.EmployeeDao;
import com.employee.emp.mappers.Mapper;
import com.employee.emp.models.Address;
import com.employee.emp.models.Department;
import com.employee.emp.models.Employee;
import com.employee.emp.repositories.EmpRepository;


@Service
public class EmployeeServiceImpl implements EmployeeService{

	@Autowired
	private EmpRepository empRepo;
	
	@Override
	public Optional<Employee> registerEmp(Employee employee) {
		Optional<EmployeeDao> empDb = empRepo.findBycompanyemail(employee.getCompanyemail());
		if(empDb.isEmpty()) {
			EmployeeDao empDao = Mapper.EmpToEmpDao(employee);
			empRepo.save(empDao);
			Employee emp = Mapper.EmpDaoToEmp(empDao);
			return Optional.of(emp);
		}
		return Optional.empty();
	}

	@Override
	public Optional<List<Employee>> getAllEmployee() {
		List<EmployeeDao> listDb = empRepo.findAll();
		List<Employee> list = new ArrayList<>();
		for(EmployeeDao e : listDb) {
			list.add(Mapper.EmpDaoToEmp(e, new Employee()));
		}
		return Optional.of(list);
	}

	@Override
	public Optional<Employee> deleteEmployee(UUID id) {
		Optional<EmployeeDao> emp = empRepo.findById(id);
		if(emp.isPresent()) {
			empRepo.delete(emp.get());
			return Optional.of(Mapper.EmpDaoToEmp(emp.get(), new Employee()));
		}
		return Optional.empty();
	}

	@Override
	public Optional<Employee> updateEmployee(UUID id,Employee emp_new) {
		Optional<EmployeeDao> emp = empRepo.findById(id);
		if(emp.isPresent()) {
			 EmployeeDao empdao = Mapper.UpdateEmployeeDao(emp_new, emp.get());
			 empRepo.save(empdao);
			 return Optional.of(Mapper.EmpDaoToEmp(empdao));
		}
		return Optional.empty();
	}

	@Override
	public Optional<Employee> getEmployeeById(UUID id) {
		Optional<EmployeeDao> empDb = empRepo.findById(id);
		if(empDb.isPresent()) {
			return Optional.of(Mapper.EmpDaoToEmp(empDb.get()));
		}
		return Optional.empty();
	}

	@Override
	public Optional<Address> updateAddress(UUID id, Address address) {
		Optional<EmployeeDao> empDb = empRepo.findById(id);
		if(empDb.isPresent()) {
			AddressDao updatedAddress =	Mapper.updateAddress(address,empDb.get().getAddress());
			empDb.get().setAddress(updatedAddress);
			empRepo.save(empDb.get());
			return Optional.of(Mapper.AddressDaoToAddress(updatedAddress));
		}
		return Optional.empty();
	}

	@Override
	public Optional<Department> updateDepartment(UUID id, Department department) {
		Optional<EmployeeDao> empDb = empRepo.findById(id);
		if(empDb.isPresent()) {
			DepartmentDao deptDao =	Mapper.updateDepartment(department,empDb.get().getDepartment());
			empDb.get().setDepartment(deptDao);
			empRepo.save(empDb.get());
			return Optional.of(Mapper.DeptDaoToDept(deptDao));
		}
		return Optional.empty();
	}


	@Override
	public List<Employee> getAllEmployeePageByAndSortBy(int pageSize, int pageNum, Sort sortBy) {
		List<Employee> list = new ArrayList<>();
		PageRequest paging = PageRequest.of(pageNum, pageSize, sortBy);
		Page<EmployeeDao> pagedResult = empRepo.findAll(paging);
		if(pagedResult.hasContent()) {
			for(EmployeeDao e : pagedResult) {
				list.add(Mapper.EmpDaoToEmp(e));
			}
			return list;
		}else {
			return new ArrayList<Employee>();
		}
	}

	@Override
	public List<Employee> searchSpecs(String keyword) {
		List<EmployeeDao> listDb = empRepo.findByKeyword(keyword);
		List<Employee> list = new ArrayList<>(); 
		for(EmployeeDao e : listDb) {
			list.add(Mapper.EmpDaoToEmp(e));
		}
		return list;
	}

	

	

	

	

	

	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
}
